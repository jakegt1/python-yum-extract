#!/usr/bin/python3
import re
import argparse
import os
import subprocess
import shutil
import sys

parser_description = '''
Download and install yum packages outside of /usr/.
'''
parser = argparse.ArgumentParser(
    description=parser_description
)

parser.add_argument(
    'package',
    metavar="pkg",
    help='Package to install.'
)

parser.add_argument(
    '-local',
    action='store_true',
    help='optional: Indicates installation into ~/.local/ .'
)

parser.add_argument(
    '-dcs',
    action='store_true',
    help='optional: Indicates installation for DCS-GET.'
)

parser.add_argument(
    '--location',
    metavar='dir',
    help='Specify location when installing outside of DCS-GET.',
)

parser.add_argument(
    '-i686',
    action='store_true',
    help='Find package for 32 bit instead of 64 bit.'
)

parser.add_argument(
    '-noarch',
    action='store_true',
    help='HOTFIX: download noarch package'
)

parser.add_argument(
    '--name',
    metavar='pkg_name',
    help='Specify name when installing.'
)

args = parser.parse_args()


class YumExtract():

    def check_package_exists(self):
        exists = False
        search_proc = subprocess.check_output(
            [
                "yum",
                "search",
                self.pkg
            ],
            shell=False,
        )
        search_proc = search_proc.decode("utf-8")
        search_proc = search_proc.split("\n")
        search_proc = search_proc[2:]
        package_line = self.pkg + "." + self.arch
        for line in search_proc:
            if(package_line in line and package_line[0] == line[0]):
                exists = True
                break
        return exists

    def check_package_installed(self):
        exists = False
        files = os.listdir(os.getcwd())
        for file in files:
            if(self.full_name in file):
                exists = True
                break
        return exists

    def download_and_extract(self):
        download_info = subprocess.check_output(
            [
                "yumdownloader",
                self.pkg + "." + self.arch
            ]
        )
        downloaded_file = os.listdir(os.getcwd())[0]
        version_pattern = re.compile('[0-9]+\.[0-9]+\.[0-9]+')
        regex = re.search(version_pattern, downloaded_file)
        DEVNULL = open(os.devnull, 'wb')
        rpm2cpio = subprocess.Popen(
            [
                "rpm2cpio",
                downloaded_file
            ],
            stdout=subprocess.PIPE
        )
        extract_output = subprocess.call(
            [
                "cpio",
                "-idmv"
            ],
            stdin=rpm2cpio.stdout,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.STDOUT
        )
        rpm2cpio.wait()
        os.remove(downloaded_file)
        os.chdir("../")
        if(regex):
            os.rename(self.full_name, self.full_name+"-"+regex.group(0))
            self.full_name = self.full_name+"-"+regex.group(0)
        os.chdir(self.full_name)

    def copy_into_directory(self):
        files = os.listdir(os.getcwd())
        local_path = os.path.expanduser('~/.local/')
        for file in files:
            if(os.path.isdir(file)):
                subprocess.call(
                    [
                        "cp",
                        "-R",
                        file,
                        local_path
                    ]
                )
            else:
                shutil.copytree(file, local_path)

    def move_directories(self):
        if(os.path.exists("usr")):
            os.chdir("usr")
            files = os.listdir(os.getcwd())
            for file in files:
                if(os.path.isdir(file)):
                    subprocess.call(
                        [
                            "cp",
                            "-R",
                            file,
                            "../"+file
                        ]
                    )
                else:
                    shutil.copytree(file, "../"+file)
            os.chdir("../")
            shutil.rmtree("usr")

    def __init__(self, args):
        self.local = args.local
        self.dcs = args.dcs
        self.pkg_name = args.name
        self.pkg = args.package
        self.location = args.location
        if(args.i686):
            self.arch = "i686"
        elif(args.noarch):
            self.arch = "noarch"
        else:
            self.arch = "x86_64"
        self.full_name = self.pkg+"."+self.arch


        if(self.dcs and self.location):
            try:
                raise NameError('Bad use of DCS option')
            except NameError:
                print("DCS option used with location option, exiting")
                sys.exit(1)

        if(self.local and self.dcs):
            try:
                raise NameError('Bad use of local and dcs options')
            except NameError:
                print("Local and dcs options used together, exiting")
                sys.exit(1)

        if(self.local and self.location):
            try:
                raise NameError('Bad use of local option')
            except NameError:
                print("Local option used with location option, exiting")

        if(self.dcs):
            self.location = "/var/tmp/dcs-get/"
        elif(self.local):
            self.location = os.path.expanduser('~/.local/')
        elif(not self.location):
            self.location = os.getcwd()

        if(not os.path.isdir(self.location)):
            try:
                raise NameError('Location for download does not exist')
            except NameError:
                print("Location given by argument does not exist, exiting")
                sys.exit(1)

        if(self.location[-1] != "/"):
            self.location += "/"

        if(not self.check_package_exists()):
            try:
                raise NameError('Package does not exist')
            except NameError:
                print("Package does not exist on yum, exiting")
                sys.exit(1)

        os.chdir(self.location)

        if(self.check_package_installed()):
            try:
                raise NameError('Package is already installed')
            except NameError:
                print("Package is found in directory, likely installed.")
                sys.exit(1)

        os.makedirs(self.full_name)
        os.chdir(self.full_name)

        print("Downloading "+self.full_name)
        self.download_and_extract()
        print("Installing to correct directory..")
        self.move_directories()

        if(self.dcs):
            print("Generating links for dcs-get..")
            os.chdir("/var/tmp/dcs-get/")
            subprocess.call(
                [
                    "dcs-get",
                    "g",
                    self.full_name
                ],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.STDOUT
            )
            print("Finished generating links for dcs-get.")

        if(self.local):
            print("Copying files into .local..")
            self.copy_into_directory()
            print("Files copied into .local.")

        print("Completed installation of "+self.full_name)

YumExtract(args)
