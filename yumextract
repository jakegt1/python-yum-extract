#!/usr/bin/python3
import argparse
import os
import subprocess
import shutil
import sys

parser_description = '''
Download and install yum packages outside of /usr/.
'''
parser = argparse.ArgumentParser(
    description=parser_description
)

parser.add_argument(
    'package',
    metavar="pkg",
    help='Package to install.'
)

parser.add_argument(
    '-dcs',
    action='store_true',
    help='optional: Indicates installation for DCS-GET.'
)

parser.add_argument(
    '--location',
    metavar='dir',
    help='Specify location when installing outside of DCS-GET.',
)

parser.add_argument(
    '-i686',
    metavar='i686',
    help='Find package for 32 bit instead of 64 bit.'
)

parser.add_argument(
    '--name',
    metavar='pkg_name',
    help='Specify name when installing.'
)

args = parser.parse_args()


class YumExtract():

    def check_package_exists(self):
        exists = False
        search_proc = subprocess.check_output(
            [
                "yum",
                "search",
                self.pkg
            ],
            shell=False
        )
        search_proc = search_proc.decode("utf-8")
        search_proc = search_proc.split("\n")
        search_proc = search_proc[2:]
        package_line = self.pkg + "." + self.arch
        for line in search_proc:
            if(package_line in line):
                exists = True
                break
        return exists

    def download_and_extract(self):
        download_info = subprocess.check_output(
            [
                "yumdownloader",
                self.pkg + "." + self.arch
            ],
            shell=False
        )
        downloaded_file = os.listdir(os.getcwd())[0]
        DEVNULL = open(os.devnull, 'wb')
        rpm2cpio = subprocess.Popen(
            [
                "rpm2cpio",
                downloaded_file
            ],
            stdout=subprocess.PIPE
        )
        extract_output = subprocess.call(
            [
                "cpio",
                "-idmv"
            ],
            stdin=rpm2cpio.stdout,
        )
        rpm2cpio.wait()
        os.remove(downloaded_file)

    def move_directories(self):
        if(os.path.exists("usr")):
            os.chdir("usr")
            files = os.listdir(os.getcwd())
            for file in files:
                shutil.copytree(file, "../"+file)
            os.chdir("../")
            shutil.rmtree("usr")

    def __init__(self, args):
        self.dcs = args.dcs
        self.pkg_name = args.name
        self.pkg = args.package
        self.location = args.location
        if(args.i686):
            self.arch = "i686"
        else:
            self.arch = "x86_64"


        if(self.dcs and self.location):
            try:
                raise NameError('Bad use of DCS option')
            except NameError:
                print("DCS option used with location option, exiting")
                sys.exit(1)

        if(self.dcs):
            self.location = "/var/tmp/dcs-get/"
        elif(not self.location):
            self.location = os.getcwd()

        if(not os.path.isdir(self.location)):
            try:
                raise NameError('Location for download does not exist')
            except NameError:
                print("Location given by argument does not exist, exiting")
                sys.exit(1)

        if(self.location[-1] != "/"):
            self.location += "/"

        if(not self.check_package_exists()):
            try:
                raise NameError('Package does not exist')
            except NameError:
                print("Package does not exist on yum, exiting")
                sys.exit(1)

        os.chdir(self.location)
        os.makedirs(self.pkg+"."+self.arch)
        os.chdir(self.pkg+"."+self.arch)

        self.download_and_extract()
        self.move_directories()



YumExtract(args)
